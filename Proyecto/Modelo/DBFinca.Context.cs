//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Modelo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBFincaEntities : DbContext
    {
        public DBFincaEntities()
            : base("name=DBFincaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AbonoCompra> AbonoCompra { get; set; }
        public virtual DbSet<AbonoDeuda> AbonoDeuda { get; set; }
        public virtual DbSet<AbonoEgreso> AbonoEgreso { get; set; }
        public virtual DbSet<Arboles> Arboles { get; set; }
        public virtual DbSet<Compra> Compra { get; set; }
        public virtual DbSet<Compra_Insumo> Compra_Insumo { get; set; }
        public virtual DbSet<Concepto> Concepto { get; set; }
        public virtual DbSet<Departamento> Departamento { get; set; }
        public virtual DbSet<DeudaPersona> DeudaPersona { get; set; }
        public virtual DbSet<Egreso> Egreso { get; set; }
        public virtual DbSet<Finca> Finca { get; set; }
        public virtual DbSet<Insumo> Insumo { get; set; }
        public virtual DbSet<Labor> Labor { get; set; }
        public virtual DbSet<Labor_Lote> Labor_Lote { get; set; }
        public virtual DbSet<LaborLote_Insumo> LaborLote_Insumo { get; set; }
        public virtual DbSet<Lote> Lote { get; set; }
        public virtual DbSet<MovimientoProduccion> MovimientoProduccion { get; set; }
        public virtual DbSet<MovimientosArboles> MovimientosArboles { get; set; }
        public virtual DbSet<Municipio> Municipio { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<Produccion> Produccion { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<RegistroPago> RegistroPago { get; set; }
        public virtual DbSet<RegistroPago_DeudaPersona> RegistroPago_DeudaPersona { get; set; }
        public virtual DbSet<RegistroPagoSalario> RegistroPagoSalario { get; set; }
        public virtual DbSet<SalarioPersonaPermanente> SalarioPersonaPermanente { get; set; }
        public virtual DbSet<SalarioPersonaTemporal> SalarioPersonaTemporal { get; set; }
        public virtual DbSet<TipoArbol> TipoArbol { get; set; }
        public virtual DbSet<TipoContratoPersona> TipoContratoPersona { get; set; }
        public virtual DbSet<TipoDocumento> TipoDocumento { get; set; }
        public virtual DbSet<TipoInsumo> TipoInsumo { get; set; }
        public virtual DbSet<Venta> Venta { get; set; }
    
        public virtual ObjectResult<string> gestionTipoArboles(string nombreArbol, string descripcion, Nullable<int> idTipoArbol, Nullable<int> opc)
        {
            var nombreArbolParameter = nombreArbol != null ?
                new ObjectParameter("NombreArbol", nombreArbol) :
                new ObjectParameter("NombreArbol", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var idTipoArbolParameter = idTipoArbol.HasValue ?
                new ObjectParameter("idTipoArbol", idTipoArbol) :
                new ObjectParameter("idTipoArbol", typeof(int));
    
            var opcParameter = opc.HasValue ?
                new ObjectParameter("opc", opc) :
                new ObjectParameter("opc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("gestionTipoArboles", nombreArbolParameter, descripcionParameter, idTipoArbolParameter, opcParameter);
        }
    
        public virtual ObjectResult<string> gestionConcepto(string nombreConcepto, string descripcion, Nullable<int> idConcepto, Nullable<int> opc)
        {
            var nombreConceptoParameter = nombreConcepto != null ?
                new ObjectParameter("NombreConcepto", nombreConcepto) :
                new ObjectParameter("NombreConcepto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var idConceptoParameter = idConcepto.HasValue ?
                new ObjectParameter("idConcepto", idConcepto) :
                new ObjectParameter("idConcepto", typeof(int));
    
            var opcParameter = opc.HasValue ?
                new ObjectParameter("opc", opc) :
                new ObjectParameter("opc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("gestionConcepto", nombreConceptoParameter, descripcionParameter, idConceptoParameter, opcParameter);
        }
    }
}
